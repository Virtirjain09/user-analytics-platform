# -*- coding: utf-8 -*-
"""generate_data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fNbbFP12MzUdkEcToUHiJgEMfxRNnpVr
"""

import pandas as pd
import numpy as np
from faker import Faker
from datetime import datetime, timedelta

# --- Configuration ---
NUM_USERS = 1200
START_DATE = datetime(2023, 1, 1)
END_DATE = datetime(2025, 6, 30)
EVENT_FUNNEL = ['signed_up', 'viewed_dashboard', 'created_project', 'invited_teammate', 'upgraded_plan']
CHURN_EVENT = 'unsubscribed'

fake = Faker()

# --- Logic ---
def generate_events():
    users = [{'user_id': i, 'signup_date': fake.date_time_between(start_date=START_DATE, end_date=END_DATE)} for i in range(NUM_USERS)]
    events = []

    for user in users:
        user_id = user['user_id']
        current_time = user['signup_date']

        # Add signup event
        events.append({'user_id': user_id, 'event_name': EVENT_FUNNEL[0], 'timestamp': current_time})

        # Decide if the user will churn (30% chance)
        will_churn = np.random.choice([True, False], p=[0.3, 0.7])

        # Progress through funnel
        for event_name in EVENT_FUNNEL[1:]:
            # Users are less likely to complete later steps
            if np.random.rand() < 0.7:
                current_time += timedelta(hours=np.random.uniform(1, 48), minutes=np.random.uniform(0, 60))
                if current_time > END_DATE: break
                events.append({'user_id': user_id, 'event_name': event_name, 'timestamp': current_time})
            else:
                break # User dropped off

        # Add churn event if applicable
        if will_churn:
            current_time += timedelta(days=np.random.uniform(30, 180))
            if current_time <= END_DATE:
                events.append({'user_id': user_id, 'event_name': CHURN_EVENT, 'timestamp': current_time})

    return pd.DataFrame(events)

if __name__ == "__main__":
    df_events = generate_events()
    df_events.to_csv('data/user_events.csv', index=False)
    print("Generated data/user_events.csv with", len(df_events), "events.")

